@using Microsoft.AspNetCore.Identity
@inject UserManager<ApplicationUser> _userManager
@model IEnumerable<DevBook.Models.PostModel>

@{
    ViewData["Title"] = "Index";
}

    <div class="container my-3">
     <h1>Manage Posts</h1>
     <hr />
    @foreach (var item in Model)
    {
    <div class="d-flex my-5">
    <div class="col-9">
                <h1 class="text-center p-3 mx-1 rounded" style="background-color:#eceeef;">@item.Title</h1>
    <div class="">
        <div class="post-content mb-3 w-100">
            @item.Content
        </div>
        <div class="mb-3">
            @foreach (var postTag in item.PostTags)
            {
                <span class="badge tag-span p-2 mb-3 rounded">@postTag.Tag.Name</span>
            }
        </div>
            @{
                var userId = item.UserId;
            }
            @if (!string.IsNullOrEmpty(userId))
            {
                var user = await _userManager.FindByIdAsync(userId);
                if (user != null)
                {
                    <p class="col-sm-6 mb-1 written-by">Written by @user.FirstName @user.LastName</p>
                }

                    }
                    <p class="mb-4">
                        @item.CreatedAt
                    </p>
                </div>
                <a class="btn btn-primary rounded" asp-action="Edit" asp-route-id="@item.Id">Edit Post</a>
                <a class="btn btn-primary rounded" asp-action="Delete" asp-route-id="@item.Id">Delete Post</a>
                <a asp-action="Create" class="btn btn-primary rounded">Create New Post</a>
                <hr />
            </div>
            <div class="col-3">
                @if (item.PostImage != null)
                {
                    <img class="img-fluid rounded" src="data:image/jpeg;base64,@Convert.ToBase64String(item.PostImage)" alt="Post Image" />
                }
            </div>
        </div>
    }
</div>